#Primer trimming

library(dada2)
packageVersion("dada2")
library(ShortRead)
packageVersion("ShortRead")
library(Biostrings)
packageVersion("Biostrings")
library(phyloseq)
library(dplyr)

setwd("D:/Maestr√≠a_ Zamia phyllosphere/Fastq_Lili/16S")

path <- "/Users/saltonstallk/Desktop/Lili/16S"
path <- "/Users/saltonstallk/Desktop/Lili/nifH"
list.files(path)

##Sort ensures forward/reverse reads are in same order

fnFs <- sort(list.files(pattern = "_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(pattern = "_R2_001.fastq.gz", full.names = TRUE))

###Primers

FWD <- "AACMGGATTAGATACCCKG" #16S
REV <- "AGGGTTGCGCTCGTTG"  #16S`

FWD<- "TGCGAYCCSAARGCBGACTC"  #polF
REV<-"ATSGCCATCATYTCRCCGGA" #PolR 

allOrients <- function(primer) {
  # Create all orientations of the input sequence requiere(Biostrings)
  dna <- DNAString(primer) # The Biostrings works w/DNAstring objects rather than character vectors
  orients <- c(Forward = dna, Complement = complement(dna), Reverse = reverse(dna), RevComp = reverseComplement(dna)) 
  return(sapply(orients,toString)) # Convert back to character vector
}
FWD.orients <- allOrients(FWD)
REV.orients <- allOrients(REV)
FWD.orients

#The presence of ambiguous bases (Ns) in the sequencing reads makes accurate mapping of short primer sequences difficult. Next we are going to "pre-filter" the sequences just to remove those with Ns, but perform no other filtering.

fnFs.filtN <- file.path("filtN", basename(fnFs)) #Put N-filterd files in filtN/subdirectory
fnRs.filtN <- file.path("filtN", basename(fnRs))
outN.16S = filterAndTrim(fnFs.16S, fnFs.filtN, fnRs.16S, fnRs.filtN, maxN = 0, multithread = TRUE)

filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0,multithread = TRUE)
####Primer hits

primerHits <- function(primer, fn) {
  # Counts number of reads in which the primer is found
  nhits <- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
  return(sum(nhits > 0))
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]),
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))

####run cutadapt

cutadapt <- "C:/Users/lili_/miniconda3/Scripts/activate.bat C:/Users/lili_/miniconda3"
system2(cutadapt, args = "--version")

###

path.cut <- file.path("cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut <- file.path(path.cut, basename(fnFs.16S))
fnRs.cut <- file.path(path.cut, basename(fnRs.16S))

FWD.RC <-dada2:::rc(FWD)
REV.RC <-dada2:::rc(REV)

#Trim FWD and the reverse-complement of REV off of R1 (forward reads)

R1.flags <- paste("-g", FWD, "-a", REV.RC)

#Trim REV and the reverse-complement of FWD off of R2 (reverse reads)

R2.flags <- paste("-G", REV, "-A", FWD.RC)

#Run cutadapt

for(i in seq_along(outN.16S)){
  system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, "-o", fnFs.cut[i], fnFs.filtN
[i], fnRs.filtN[i])) # -n 2 required to remove FWD and REV from reads
}
rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.cut[[1]]),
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.cut[[1]]),
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.cut[[1]]),
      REV.reverseReads = sapply(REV.orients, primerHits, fn = fnRs.cut[[1]]))
